{"version":3,"sources":["components/Carousel.tsx","components/Input.tsx","components/Form.tsx","App.tsx","index.tsx"],"names":["Carousel","state","moveImage","this","props","images","frameSize","itemWidth","animationDuration","infinite","step","styles","ul","overflow","width","divMoveList","display","length","transition","transform","className","style","map","url","src","alt","type","onClick","moveTo","setState","Component","Input","changeState","min","max","dataName","children","onChange","target","dataset","valueAsNumber","checked","name","defaultProps","Form","imagesLength","App","value","bool","Error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f4486b10.chunk.js","sourcesContent":["import { Component, ReactNode } from 'react';\nimport { State as Prop, StateCarousel } from '../Types';\nimport './Carousel.scss';\n\nclass Carousel extends Component<Prop, StateCarousel> {\n  state: Readonly<StateCarousel> = {\n    moveImage: 0,\n  };\n\n  render(): ReactNode {\n    const {\n      images,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n      step,\n    } = this.props;\n    const { moveImage } = this.state;\n\n    const styles = {\n      ul: {\n        overflow: 'hidden',\n        width: `${itemWidth * frameSize}px`,\n      },\n      divMoveList: {\n        display: 'flex',\n        width: `${itemWidth * images.length}px`,\n        transition: `transform ${animationDuration}ms`,\n        transform: `translate(-${moveImage}px, 0)`,\n      },\n      images: {\n        width: `${itemWidth}px`,\n      },\n    };\n\n    const movePrev = () => {\n      let moveTo = moveImage;\n\n      if (moveTo === 0 && infinite) {\n        moveTo = (images.length - frameSize) * itemWidth;\n        this.setState({ moveImage: moveTo });\n\n        return;\n      }\n\n      moveTo = moveImage - itemWidth * step;\n\n      if (moveTo < 0) {\n        moveTo = 0;\n      }\n\n      this.setState({ moveImage: moveTo });\n    };\n\n    const moveNext = () => {\n      let moveTo = moveImage;\n\n      if (moveTo === (images.length - frameSize) * itemWidth && infinite) {\n        moveTo = 0;\n        this.setState({ moveImage: moveTo });\n\n        return;\n      }\n\n      moveTo = moveImage + itemWidth * step;\n\n      if (moveTo > (images.length - frameSize) * itemWidth) {\n        moveTo = (images.length - frameSize) * itemWidth;\n      }\n\n      this.setState({ moveImage: moveTo });\n    };\n\n    return (\n      <div className=\"Carousel\">\n        <ul\n          className=\"Carousel__list\"\n          style={styles.ul}\n        >\n          <div\n            className=\"Carousel__moveList\"\n            style={styles.divMoveList}\n          >\n            {images.map(url => (\n              <li>\n                <img\n                  src={url}\n                  alt=\"smile\"\n                  style={styles.images}\n                />\n              </li>\n            ))}\n          </div>\n        </ul>\n\n        <button\n          type=\"button\"\n          onClick={movePrev}\n        >\n          Prev\n        </button>\n\n        <button\n          type=\"button\"\n          data-cy=\"next\"\n          onClick={moveNext}\n        >\n          Next\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","import { FC } from 'react';\n\ntype Props = {\n  type: string,\n  step?: string,\n  min?: string,\n  max?: string,\n  dataName: string,\n  changeState: (name: string | undefined, value: number, a: boolean) => void,\n};\n\nexport const Input: FC<Props> = ({\n  changeState,\n  type,\n  step,\n  min,\n  max,\n  dataName,\n  children,\n}) => (\n  <label>\n    {`${children}: `}\n    <input\n      type={type}\n      step={step}\n      max={max}\n      min={min}\n      data-name={dataName}\n      onChange={({ target }) => {\n        const { dataset, valueAsNumber, checked } = target;\n\n        changeState(dataset.name, valueAsNumber, checked);\n      }}\n    />\n  </label>\n);\n\nInput.defaultProps = {\n  step: '',\n  min: '',\n  max: '',\n};\n","import { FC } from 'react';\nimport { Input } from './Input';\n\ntype Props = {\n  imagesLength: number,\n  changeState: (name: string | undefined, value: number, a: boolean) => void,\n};\n\nexport const Form: FC<Props> = ({ imagesLength, changeState }) => (\n  <form>\n    <h2>Custom settings</h2>\n\n    <Input\n      type=\"number\"\n      step=\"20\"\n      min=\"50\"\n      dataName=\"itemWidth\"\n      changeState={changeState}\n    >\n      Image width\n    </Input>\n\n    <Input\n      type=\"number\"\n      max={`${imagesLength}`}\n      dataName=\"frameSize\"\n      changeState={changeState}\n    >\n      Frame size\n    </Input>\n\n    <Input\n      type=\"number\"\n      max={`${imagesLength}`}\n      dataName=\"step\"\n      changeState={changeState}\n    >\n      Step\n    </Input>\n\n    <Input\n      type=\"number\"\n      min=\"1000\"\n      step=\"200\"\n      dataName=\"animationDuration\"\n      changeState={changeState}\n    >\n      Animation duration\n    </Input>\n\n    <Input\n      type=\"checkbox\"\n      dataName=\"infinite\"\n      changeState={changeState}\n    >\n      Infinite loop\n    </Input>\n  </form>\n);\n","import { Component } from 'react';\nimport Carousel from './components/Carousel';\nimport { Form } from './components/Form';\nimport { State, ChangeStateType } from './Types';\n\nimport './App.scss';\n\nclass App extends Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 2,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  changeState: ChangeStateType = (name, value, bool) => {\n    switch (name) {\n      case 'frameSize':\n        this.setState({ frameSize: value });\n        break;\n\n      case 'step':\n        this.setState({ step: value });\n        break;\n\n      case 'itemWidth':\n        this.setState({ itemWidth: value });\n        break;\n\n      case 'animationDuration':\n        this.setState({ animationDuration: value });\n        break;\n\n      case 'infinite':\n        this.setState({ infinite: bool });\n        break;\n\n      default:\n        throw new Error('no name');\n    }\n  };\n\n  render() {\n    const { images } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1 data-cy=\"title\">\n          {`Carousel with ${images.length} images`}\n        </h1>\n\n        <Carousel {...this.state} />\n\n        <Form\n          imagesLength={images.length}\n          changeState={this.changeState}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}